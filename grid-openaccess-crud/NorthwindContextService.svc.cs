#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace OpenAccessKendoService
{
    using System;
    using System.Collections.Generic;
    using System.ServiceModel;
    using System.ServiceModel.Activation;
    using OpenAccessKendoService.Assemblers;
    using OpenAccessKendoService.Dto;
    using OpenAccessKendoService.Repositories;
    using OpenAccessKendoService.Services;

    [ServiceBehavior(InstanceContextMode = InstanceContextMode.PerCall)]
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
	public partial class NorthwindContextService : INorthwindContextService
	{
		private INorthwindContextUnitOfWork unitOfWork;
		public INorthwindContextUnitOfWork UnitOfWork
	    {
			get
			{
	            if(this.unitOfWork == null)
	            {
	                this.unitOfWork = new NorthwindContext();
	            }
	            return this.unitOfWork;
			}
	        set
	        {
	            this.unitOfWork = value;
	        }
		}	
		
		private IProductService productservice;
		public virtual IProductService ProductService
		{
			get
			{
				if (this.productservice == null)
				{
					IProductAssembler assembler = new ProductAssembler();
					IProductRepository repository = new ProductRepository(this.UnitOfWork);
	
					this.productservice = new ProductService(assembler, repository);
				}
				return this.productservice;
			}
		}
			
		#region Products CRUD Operations
	
		public IEnumerable<ProductDto> ReadProducts()	
		{
			return this.ProductService.GetAll();
		}
	
		public IEnumerable<ProductDto> ReadProductsPaged(int startIndex, int pageSize)
		{
			return this.ProductService.Find(startIndex, pageSize);
		}
	
		public IEnumerable<ProductDto> ReadProductsFiltered(string sortExpression, string filterExpression)
		{
			return this.ProductService.Find(sortExpression, filterExpression);
		}
	
		public IEnumerable<ProductDto> ReadProductsPagedAndFiltered(int startIndex, int pageSize, string sortExpression, string filterExpression)
		{
			return this.ProductService.Find(startIndex, pageSize, sortExpression, filterExpression);
		}
	
		public ProductDto ReadProduct(string dtoKey)
		{
			return this.ProductService.GetByKey(dtoKey);
		}
		
		public int ProductsCount()
		{
			return this.ProductService.Count();
		}
		
		public int ProductsCountFiltered(string filterExpression)
		{
			return this.ProductService.Count(filterExpression);
		}
	
		public ProductDto CreateProduct(ProductDto product)
		{
			product.DtoKey =  this.ProductService.Add(product);
			this.UnitOfWork.SaveChanges();
            product.ProductID = Convert.ToInt32(product.DtoKey);
			return product;
		}
	
		public void UpdateProduct(ProductDto product)
		{
			this.ProductService.Update(product);
	        this.UnitOfWork.SaveChanges();
		}
	
		public void UpdateProducts(IEnumerable<ProductDto> products)
		{
			if (products == null)
			{
				return;
			}
	
			foreach (ProductDto product in products)
			{
				if (product == null)
				{
					continue;
				}
				
				this.UpdateProduct(product);
			}
		}
	
		public void DeleteProduct(ProductDto product)
		{
			this.ProductService.Delete(product);
			this.UnitOfWork.SaveChanges();		
		}
	
		public void DeleteProducts(IEnumerable<ProductDto> products)
		{
			if (products == null)
			{
				return;
			}
	
			foreach (ProductDto product in products)
			{
				if (product == null)
				{
					continue;
				}
				
				this.DeleteProduct(product);
			}
		}
		
		#endregion
		
		
		~NorthwindContextService()
	    {
	        IDisposable context = this.unitOfWork as IDisposable;
	        if(context != null)
	        {
	            context.Dispose();
	        }
	    }
	}
}
#pragma warning restore 1591
